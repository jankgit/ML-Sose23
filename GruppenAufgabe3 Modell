{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c1681b4d-4596-4366-ae6a-9293ce83c47f",
   "metadata": {},
   "source": [
    "# Gruppen-Aufgabe 3 Modell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "7ae1ab21-315d-43a2-8fbc-f2a094c5fea0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import csv\n",
    "import warnings\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import cross_val_score\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "15f17984-cb26-4413-94ca-54a651677dbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Datensatz laden und irrelevanten Merkmale „Over 18“,„EmployeeCount“ und „StandardHours“ entfernen\n",
    "df = pd.read_csv('Employee Attrition and Factors.csv', sep=\";\")\n",
    "df = df.drop([\"Over18\", \"EmployeeCount\", \"StandardHours\"], axis=1)\n",
    "\n",
    "# Bereinigung der Ausreißer durch Capping aus GruppenAufgabe 2\n",
    "num_columns = df.shape[1]\n",
    "for spaltenNummer in range(num_columns):\n",
    "    spalte = df.iloc[:, spaltenNummer].copy()\n",
    "    try:\n",
    "        percentile25 = spalte.quantile(0.25)\n",
    "        percentile75 = spalte.quantile(0.75)\n",
    "        iqr = percentile75 - percentile25\n",
    "        upper_limit = percentile75 + 1.5 * iqr\n",
    "        lower_limit = percentile25 - 1.5 * iqr\n",
    "\n",
    "        spalte[(spalte > upper_limit)] = upper_limit\n",
    "        spalte[(spalte < lower_limit)] = lower_limit\n",
    "\n",
    "        df.iloc[:, spaltenNummer] = spalte\n",
    "\n",
    "    except (TypeError, ValueError):\n",
    "        continue\n",
    "\n",
    "# Umkodierung in nummerische Werte (hier werden abweichend zu Aufg2 die nicht nummerischen Spalten überschrieben)\n",
    "for spaltenNummer in range(num_columns):\n",
    "    spalte = df.iloc[:, spaltenNummer]\n",
    "    le = LabelEncoder()    \n",
    "    le_result = le.fit_transform(spalte)\n",
    "    df.iloc[:, spaltenNummer] = le_result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6547b591-1ef4-4098-874b-a53030a78414",
   "metadata": {},
   "source": [
    "Logistische Regression (ohne Regularisierung)\n",
    "und Ergebnisse über die Kreuzvalidierung absichern."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "8f642674-170f-4ade-a69c-9aa7247afe1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 1 1 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n",
      " 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1\n",
      " 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Genauigkeit des Modells: 0.8843537414965986\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/a/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mittelwert der Kreuzvalidierung : 0.8721088435374149\n",
      "Einzelwerte der Kreuzvalidierung : [0.88095238 0.86734694 0.86054422 0.88095238 0.8707483 ]\n"
     ]
    }
   ],
   "source": [
    "# Aufteilen von df in X (Features) und target \n",
    "df_ohne_target = df.drop(\"Attrition\", axis=1)\n",
    "target = df[\"Attrition\"]\n",
    "\n",
    "# Erzeugen von Trainingsdaten und Testdaten\n",
    "X_train, X_test, y_train, y_test = train_test_split(df_ohne_target, target, test_size=0.2, random_state=42)\n",
    "\n",
    "# Logistisches Regressionsmodell\n",
    "logReg = LogisticRegression(max_iter=5000) # Erhöhung der Iterationen von 100 auf 500 => weniger Warnings\n",
    "logReg.fit(X_train, y_train)\n",
    "\n",
    "y_prediction = logReg.predict(X_test)\n",
    "print(y_prediction)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_prediction)\n",
    "print(\"Genauigkeit des Modells:\", accuracy)\n",
    "\n",
    "# 5 Kreuzvalidierungen durchführen, dann MIttelwert ausgeben\n",
    "cross_val = cross_val_score(logReg, df_ohne_target, target, cv=5)\n",
    "cross_val_mean = np.mean(cross_val)\n",
    "print(\"Mittelwert der Kreuzvalidierung :\", cross_val_mean)\n",
    "print(\"Einzelwerte der Kreuzvalidierung :\", cross_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f820f76-b1d1-4cc5-a6d2-9b14be44dec6",
   "metadata": {},
   "source": [
    "Erläuterungen der Genauigkeit/Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "b5e670bc-65b7-4a0d-acf9-5785440ab57f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Vorhersage  Tatsächlich\n",
      "1041           0            0\n",
      "184            0            0\n",
      "1222           0            1\n",
      "67             0            0\n",
      "220            0            0\n",
      "...          ...          ...\n",
      "567            0            0\n",
      "560            0            0\n",
      "945            0            0\n",
      "522            0            0\n",
      "651            0            0\n",
      "\n",
      "[294 rows x 2 columns]\n",
      "Summe der Differenzen beträgt 34 von insg. 294 Fällen\n",
      "Anteil richtiger Vorhersagen: 0.8843537414965986\n"
     ]
    }
   ],
   "source": [
    "# DataFrame mit vorhersagten und tatsächlichen Daten erstellen\n",
    "predictions_df = pd.DataFrame({'Vorhersage': y_prediction, 'Tatsächlich': y_test})\n",
    "print(predictions_df)\n",
    "\n",
    "# Anzahl der Differenzen zwischen y_pred und y_test \n",
    "differenzen = np.abs(y_prediction - y_test)\n",
    "summe_differenzen = np.sum(differenzen)\n",
    "gesamtzahl = len(predictions_df)\n",
    "print(f\"Summe der Differenzen beträgt {summe_differenzen} von insg. {gesamtzahl} Fällen\")\n",
    "\n",
    "# Relative Anzahl der richtig vorhergesagten Fälle:\n",
    "print(f\"Anteil richtiger Vorhersagen: {1-(summe_differenzen / len(predictions_df)) }\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b6d0c56-7fdf-4bb2-b2ac-70eb2c1caba0",
   "metadata": {},
   "source": [
    "Fazit: Das Modell zeigt eine noch bessere Genauigkeit von 0,87 als der Mittelwert der Kreuzvalidierung von 0,86. Das bedeutet, dass das Modell der logistischen Regression in unserem Beispiel in ca. 87% der Fälle die richtigen Vorhersagen trifft."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "8ef7126f-62a8-4c65-96c3-28e20c5c1562",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ChatGPT Warnings-Unterdrückung bewirkt wenig... \n",
    "# Sorry.\n",
    "# \n",
    "with warnings.catch_warnings():  \n",
    "    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
    "    warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
    "    warnings.filterwarnings(\"ignore\", category=Warning)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b034ef41-d5be-4b61-af54-2ae59f4ca31b",
   "metadata": {},
   "source": [
    "BITTE NICHT WUNDERN: Je nach Prozesor kann der nachfolgenden Vorgang etwas dauern. Die Zahl der Iterationen wurde auf 5000 (statt 100) erhöht um damit weniger Iterations-Warnings zu produzieren (mehrere Seiten lang). Falls es zu lange dauert: \n",
    "logReg = LogisticRegression(max_iter=5000) auf 500 einstellen. Und dann die Warnings genießen...\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "127af544-8527-4b12-a5a3-4332431b3317",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Anzahl Hauptkomponenten  Genauigkeit\n",
      "0                        30     0.927891\n",
      "1                        29     0.914286\n",
      "2                        28     0.906122\n",
      "3                        27     0.907483\n",
      "4                        26     0.853741\n",
      "5                        25     0.855102\n",
      "6                        24     0.855102\n",
      "7                        23     0.853741\n",
      "8                        22     0.851020\n",
      "9                        21     0.848980\n",
      "10                       20     0.841497\n",
      "11                       19     0.842177\n",
      "12                       18     0.837415\n",
      "13                       17     0.838095\n",
      "14                       16     0.839456\n",
      "15                       15     0.839456\n",
      "16                       14     0.838095\n",
      "17                       13     0.838776\n",
      "18                       12     0.842177\n",
      "19                       11     0.840816\n",
      "20                       10     0.840136\n",
      "21                        9     0.840136\n",
      "22                        8     0.839456\n",
      "23                        7     0.838776\n",
      "24                        6     0.838776\n",
      "25                        5     0.838776\n",
      "26                        4     0.838776\n",
      "27                        3     0.838776\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "accuracy_dict = {}  # Dictionary für die Accuracy-Werte in Abhängigkeit von Anzahl der Hauptkomponenten\n",
    "\n",
    "# Dimensionsreduktion mit PCA von 30 bis hin zu nur 2 Hauptkomponenten: \n",
    "for i in range(30, 2, -1):\n",
    "   \n",
    "    hauptKompAna = PCA(n_components=i) # Die Zahl der Hauptkomponenten wird schrittweise verringert\n",
    "    hauptKompDaten = hauptKompAna.fit_transform(df)\n",
    "\n",
    "    # Aufteilen der reduzierten Daten in Trainings- und Testsets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(hauptKompDaten, target, test_size=0.2, random_state=42)\n",
    "\n",
    "    # Logistisches Regressionsmodell\n",
    "    logReg = LogisticRegression(max_iter=5000)\n",
    "    logReg.fit(X_train, y_train)\n",
    "    \n",
    "    # Vorhersagen für Testdaten machen\n",
    "    y_prediction = logReg.predict(X_test)\n",
    "\n",
    "    # Hier werden direkt die MIttelwerte der Kreuzvalidierung ermittelt\n",
    "    cv_scores = cross_val_score(logReg, hauptKompDaten, target, cv=5)\n",
    "    accuracy_dict[i] = cv_scores.mean()  # Accuracy-Wert zum Dictionary hinzufügen (absteigende Reihenfolge!)\n",
    "    \n",
    "    \n",
    "# Tabelle zur Darstellung der Anzahl der Hauptkomponenten und der entsprechenden Genauigkeit\n",
    "table_data = {\"Anzahl Hauptkomponenten\": list(accuracy_dict.keys()),\n",
    "              \"Genauigkeit\": list(accuracy_dict.values())}\n",
    "table = pd.DataFrame(table_data)\n",
    "print(table)\n",
    "\n",
    "# Scatter Plot der Accuracy-Werte\n",
    "plt.scatter(accuracy_dict.keys(), accuracy_dict.values())\n",
    "plt.xlabel(\"Anzahl Hauptkomponenten\")\n",
    "plt.ylabel(\"Genauigkeit\")\n",
    "plt.title(\"Genauigkeit in Abhängigkeit von den Hauptkomponenten\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fd54e5b-0274-42a3-9404-85e2d2c8cf73",
   "metadata": {},
   "source": [
    "Fazit:\n",
    "    Die Grafik zeigt, dass die Reduktion der Daten auf die Hauptkomponenten zunächst mit einem Verlust an Genauigkeit einhergeht (Graf von rechts nach links lesen!) und bei der Beschränkung auf ca. 17 Komponenten am schlechtesten ist. Bei weiterer Reduktion nimmt die Genauigkeit jedoch wieder zu und erreicht dann bei ca. 9 Komponenten eine Asymptote um den Wert 0,84. \n",
    "    \n",
    "Warum bei der Reduktion auf nur zwei Komponenten immer noch eine so hohe Güte (und das kreuzvalidiert) vorliegt, müsste man einen Statistiker fragen!\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19219e1f-2eb3-461b-8dd5-a449bca1b51b",
   "metadata": {},
   "source": [
    "1.Welche Bewertungsmetrik betrachten Sie bei Ihrer Klassifikation? Begründen Sie?\n",
    "\n",
    "In dem gegebenen Code betrachten wir die Genauigkeit (accuracy) als Bewertungsmetrik für die Klassifikation. Die Genauigkeit misst den Anteil der korrekt vorhergesagten Labels (Attrition) im Verhältnis zur Gesamtanzahl der Vorhersagen (vgl. entsprechenden Code-Chunk oben)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18602bdb-fb26-48e9-bf0b-18a4df589938",
   "metadata": {},
   "source": [
    "2. Anzahl der Iterationen führt zu höherer Genauigkeit. Bei n=100 0,84, bei n=5000 0,88.\n",
    "Die Anzahl der Hauptkomponenten wurde sukzessive reduziert, um den Einfluss auf die Vorhersagegenauigkeit des Modells zu ermitteln.\n",
    "Ab ca. 9 Hauptkomponentnen bekommt man keine weitere Verbesserung (s. Aufgabe 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45151cfe-e8ce-46c0-b4c6-d9f7ada3ae63",
   "metadata": {},
   "outputs": [],
   "source": [
    "3. Wie viele Hauptkomponenten werden benötigt, um eine Vorhersagegenauigkeit von ca. 80 % zu erreichen?\n",
    "zu erreichen?\n",
    "Das ist eine Fangfrage: Die PCA ist immer besser als 80%. Aber warum???\n",
    "\n",
    "Auf wie viele Merkmale kann man den Datensatz reduzieren? Wie gut ist die Vorhersage des Modells\n",
    "auf Basis der reduzierten Daten? Laut Berechnung auf 2 Hauptkomponenten. Das kann nicht stimmen!!!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
